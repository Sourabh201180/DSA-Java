Bubble Sort: (Aka Sinking sort/Exchange sort )
    with the 1st pass through the array, the largest element came to the end.
    with the 2nd pass the 2nd largest element is at the 2nd last index.
    .
    .
    . and so on

    i.e. with every step largest element remaining in the array comes at the last.

    Q.   3, 1, 5, 4, 2
    =>  pass 1:
            1, 3, 5, 4, 2
            1, 3, 4, 5, 2
            1, 3, 4, 2, 5
        pass 2:
            1, 3, 2, 4, 5
        pass 3:
            1, 2, 3, 4, 5   // already sorted break the loop, no need to further check
        pass 4:
            1, 2, 3, 4, 5

Space Complexity:= O(1)     constant / no extra space required i.e. copying the array, etc. not required
                            aka inplace sorting algorithm

Time Complexity:= Best  Case:  O(N)    => already sorted
                  Avg.  Case: O(N^2)
                  Worst Case: O(N^2)   => sorted in opposite

* as the size of array is growing, the no. of comparasions is also growing.